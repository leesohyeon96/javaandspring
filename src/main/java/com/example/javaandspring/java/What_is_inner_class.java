package com.example.javaandspring.java;

public class What_is_inner_class {
    int test = 1;
    // 내부 클래스/중첩클래스(=inner class)
        // - 하나의 클래스로 '클래스'나 '인터페이스 내부'에서 선언
        // - 내부에 정의된다는 점을 제외하고는 일반적인 클래스와 똑같음
        //   (어차피 외부클래스 내부에서만 사용하기 위한 클래스니 괜한 연관관계 생각없이 내부에 선언해 직관적으로 사용하자!라는 취지)
        //   inner class는 외부 클래스의 모든 멤버들에 접근 가능(ㅇㅋ)
        // - 목적 : 코드를 더 읽기 쉽고, 오래 유지하기 위함

        // - 장점
            // 1. 외부 클래스의 모든 멤버(데이터 멤버, 메소드 등)에 접근할 수 있다는 관련성의 특별한 타입을 나타냄
            // 2. 논리 그룹 클래스와 인터페이스 내부에 있기 때문에 더 읽기 쉽고, 유지 가능한 코드 개발에 사용됨
            // 3. 코드 최적화 - 작성하는 데 더 적은 코드가 요구됨
            // 4. 시각적으로 읽기 편하고 + 유지보수에 있어 이점을 가짐
            // 5. 두 클래스 멤버들 간에(외부클래스, 내부클래스) 서로 자유로이 접근할 수 있고 + 외부에는 불필요한 클래스를 감춤

    // * inner class(이너) VS nested class(중첩)
        // - inner class는 중첩(nested class)의 한 부분!

    // - 내부 클래스 종류(선언된 위치, Static 키워드 유무)
        // 1. 인스턴스 클래스
            // - 외부 클래스의 멤버변수 선언 위치에 선언
            //   외부 클래스의 인스턴스 멤버처럼 다뤄짐
            // - 인스턴스 내부 클래스에서는 static 변수를 선언할 수 없음 ㅇㅇ
            class InstanceInner {
                static int cost2 = 100; //?인제되나?
                static final int cost = 100; // 얘는 final static은 상수이므로 허용

                public void test() {
                    System.out.println(test); // 원래 지역변수접근의 경우 final이 붙어야 가능하지만 JDK1.8이후로 컴파일러가 알아서 붙여줌
                    // but, 이때 test변수에 값을 다시 주는 경우 final 상수가 아닌 변수로 취급되기에 접근 불가능함
                }
            } // 인스턴스 클래스
            // What_is_inner_class.InstanceInner s = new What_is_inner_class().new InstanceInner();
            // -> 요런 식으로 꺼내야 함

        // 2. 스태틱 클래스
            // - 외부 클래스의 멤버변수 선언 위치에 선언하며, 외부 클래스의 static 멤버처럼 다뤄짐
            static class StaticInner {} // 스태틱 클래스
            // - static 클래스 내부에는 instance 멤버와 static 멤버 모두 선언 할 수 있음
            // - static 멤버접근은 그냥 이름만으로 가능 -> What_is_inner_class.StaticInner ㅇㅇ
            // - 이 static은 우리가 아는 static이 아니다!!!!!!!!
            // -> 내부 static 클래스는 일반 클래스처럼 초기화 할때마다 다른 객체가 만들어짐 ㅇㅇ
            //    static이라고 해서 메모리에 한번만 로드 되는 객체 개념이 X
            //    즉, 내부 인스턴스 클래스처럼 외부 인스턴스를 먼저 선언하고 초기화하는 선수 작업 필요 없이
            //    '내부 클래스의 인스턴스를 바로 생성'할 수 있다는 차이점이 존재
            // [결론] 내부 클래스를 이용하는데 내부 클래스에서 바깥 외부의 인스턴스를 사용할 일이 없다면
            //       static 클래스로 선언해주어야 함!
            //  why? static이 아닌 내부 인스턴스 클래스는 '외부와 연결되있기 때문에 '외부 참조'를 갖게 되어'
            //       '메모리를 먹고, 느리고, GC 대상에서 제외되는 여러 문제점을 일으킴'

        // 3. 지역 클래스
            // - 외부 클래스의 메소드나 초기화블럭 안에 선언하며, 선언된 메소드 블록 영역 내부에서만 사용될 수 있음
            void method1() {
                class LocalInner {} // 지역 클래스
            }

        // 4. 익명 클래스
            // - 클래스의 선언과 객체의 생성을 동시에 하는 이름없는 클래스
            //   주로 클래스를 일회용으로 사용할 때 자주 이용됨
}
